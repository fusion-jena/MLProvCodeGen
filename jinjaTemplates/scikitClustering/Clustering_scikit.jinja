#TODO GAUSSIAN MIXTURE DBSCAN OPTICS
#TODO DBSCAN needs plot names
{% if model_func == "K-means" %}
#pip install scikit-learn
#pip install wheel
#pip install pandas
#pip install matplotlib
from sklearn.cluster import KMeans
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from matplotlib import pyplot as plt
%matplotlib inline{% endif %}
{% if model_func == "Gauss" %}
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import LogNorm
from sklearn.mixture import GaussianMixture
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import silhouette_score{% endif %}

{% if data_format == "example" %}
df = pd.read_csv("datasets/iris.csv")
df.head(){% endif %}

{% if data_format == "example" %}
#plt.scatter(df['petal length in cm'],df['petal width in cm'])
#plt.xlabel('petal length in cm')
#plt.ylabel('petal width in cm'){% endif %}

{% if data_format == "Spiral" %}
df = pd.read_csv("datasets/spiral.csv", header = None)
df.head(){% endif %}

{% if data_format == "Aggregation" %}
df = pd.read_csv("datasets/Aggregation.csv", header = None)
df.head(){% endif %}

{% if data_format == "R15" %}
df = pd.read_csv("datasets/R15.csv", header = None)
df.head(){% endif %}

{% if model_func == "K-means" and data_format == "example" %}
# preprocessing using MinMaxScaler()
scaler = MinMaxScaler()

df['petal length in cm'] = scaler.fit_transform(df[['petal length in cm']])
df['petal width in cm'] = scaler.fit_transform(df[['petal width in cm']])

df.head(){% endif %}

{% if model_func == "K-means" and data_format == "example" %}
plt.scatter(df['petal length in cm'],df['petal width in cm']){% endif %}

{% if model_func == "K-means" and data_format == "example" %}
km = KMeans(n_clusters = 3)
y_predicted = km.fit_predict(df[['petal length in cm','petal width in cm']])
y_predicted{% endif %}

{% if model_func == "K-means" and data_format == "example" %}
df['cluster'] = y_predicted
df.head(){% endif %}

{% if model_func == "K-means" and data_format == "example" %}
km.cluster_centers_{% endif %}

{% if model_func == "K-means" and data_format == "example" %}
df1 = df[df.cluster==0]
df2 = df[df.cluster==1]
df3 = df[df.cluster==2]
plt.scatter(df1['petal length in cm'],df1['petal width in cm'],color='green')
plt.scatter(df2['petal length in cm'],df2['petal width in cm'],color='red')
plt.scatter(df3['petal length in cm'],df3['petal width in cm'],color='black')
plt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],color='purple',marker='*',label='centroid')
plt.legend(){% endif %}

{% if ((model_func == "K-means" and data_format == "Spiral") or (model_func == "Gauss" and data_format == "Spiral")) %}
# preprocessing using MinMaxScaler()
scaler = MinMaxScaler()

df[0] = scaler.fit_transform(df[[0]])
df[1] = scaler.fit_transform(df[[1]])

df.head()
{% endif %}

{% if ((model_func == "K-means" and data_format == "Spiral") or (model_func == "Gauss" and data_format == "spiral")) %}
plt.scatter(df[0],df[1]){% endif %}

{% if model_func == "K-means" and data_format == "Spiral" %}
km = KMeans(n_clusters = 3)
y_predicted = km.fit_predict(df[[0,1]])
y_predicted{% endif %}

{% if model_func == "Gauss" and data_format == "Spiral" %}
EM = GaussianMixture(n_components=8)
EM.fit(df)
cluster = EM.predict(df)
y_predicted = EM.fit_predict(df)
y_predicted{% endif %}

{% if ((model_func == "K-means" and data_format == "Spiral") or (model_func == "Gauss" and data_format == "Spiral")) %}
df['cluster'] = y_predicted
df.head(){% endif %}

{% if model_func == "K-means" and data_format == "Spiral" %}
km.cluster_centers_{% endif %}

{% if ((model_func == "K-means" and data_format == "Spiral") or (model_func == "Gauss" and data_format == "Spiral")) %}
df1 = df[df.cluster==0]
df2 = df[df.cluster==1]
df3 = df[df.cluster==2]
plt.scatter(df1[0],df1[1],color='green')
plt.scatter(df2[0],df2[1],color='red')
plt.scatter(df3[0],df3[1],color='black')
{% if model_func == "K-means" %}plt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],color='purple',marker='*',label='centroid')
plt.legend(){% endif %}{% endif %}

{% if ((model_func == "K-means" and data_format == "Spiral") or (model_func == "Gauss" and data_format == "Spiral")) %}
# preprocessing using MinMaxScaler()
scaler = MinMaxScaler()

df[0] = scaler.fit_transform(df[[0]])
df[1] = scaler.fit_transform(df[[1]])

df.head(){% endif %}

{% if ((model_func == "K-means" and data_format == "Aggregation") or (model_func == "Gauss" and data_format == "Aggregation")) %}
plt.scatter(df[0],df[1]){% endif %}

{% if ((model_func == "K-means" and data_format == "Aggregation") or (model_func == "Gauss" and data_format == "Aggregation")) %}
km = KMeans(n_clusters = 8)
y_predicted = km.fit_predict(df[[0,1]])
y_predicted{% endif %}

{% if ((model_func == "K-means" and data_format == "Aggregation") or (model_func == "Gauss" and data_format == "Aggregation")) %}
df['cluster'] = y_predicted
df.head(){% endif %}

{% if ((model_func == "K-means" and data_format == "Aggregation") or (model_func == "Gauss" and data_format == "Aggregation")) %}
km.cluster_centers_{% endif %}

{% if ((model_func == "K-means" and data_format == "Aggregation") or (model_func == "Gauss" and data_format == "Aggregation")) %}
df1 = df[df.cluster==0]
df2 = df[df.cluster==1]
df3 = df[df.cluster==2]
df4 = df[df.cluster==3]
df5 = df[df.cluster==4]
df6 = df[df.cluster==5]
df7 = df[df.cluster==6]
df8 = df[df.cluster==7]
plt.scatter(df1[0],df1[1],color='green')
plt.scatter(df2[0],df2[1],color='red')
plt.scatter(df3[0],df3[1],color='black')
plt.scatter(df4[0],df4[1],color='yellow')
plt.scatter(df5[0],df5[1],color='orange')
plt.scatter(df6[0],df6[1],color='aqua')
plt.scatter(df7[0],df7[1],color='gray')
plt.scatter(df8[0],df8[1],color='olive')
{% if model_func == "K-means" %}plt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],color='purple',marker='*',label='centroid')
plt.legend(){% endif %}{% endif %}

{% if ((model_func == "K-means" and data_format == "Spiral") or (model_func == "Gauss" and data_format == "Spiral")) %}
# preprocessing using MinMaxScaler()
scaler = MinMaxScaler()

df[0] = scaler.fit_transform(df[[0]])
df[1] = scaler.fit_transform(df[[1]])

df.head(){% endif %}

{% if ((model_func == "K-means" and data_format == "R15") or (model_func == "Gauss" and data_format == "R15")) %}
plt.scatter(df[0],df[1]){% endif %}

{% if ((model_func == "K-means" and data_format == "R15") or (model_func == "Gauss" and data_format == "R15")) %}
km = KMeans(n_clusters = 3)
y_predicted = km.fit_predict(df[[0,1]])
y_predicted{% endif %}

{% if ((model_func == "K-means" and data_format == "R15") or (model_func == "Gauss" and data_format == "R15")) %}
df['cluster'] = y_predicted
df.head(){% endif %}

{% if ((model_func == "K-means" and data_format == "R15") or (model_func == "Gauss" and data_format == "R15")) %}
km.cluster_centers_{% endif %}

{% if ((model_func == "K-means" and data_format == "R15") or (model_func == "Gauss" and data_format == "R15")) %}
df1 = df[df.cluster==0]
df2 = df[df.cluster==1]
df3 = df[df.cluster==2]
plt.scatter(df1[0],df1[1],color='green')
plt.scatter(df2[0],df2[1],color='red')
plt.scatter(df3[0],df3[1],color='black')
{% if model_func == "K-means" %}plt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],color='purple',marker='*',label='centroid')
plt.legend(){% endif %}{% endif %}




{% if model_func == "DBSCAN" %}
#code credit: https://scikit-learn.org/stable/auto_examples/cluster/plot_dbscan.html#sphx-glr-auto-examples-cluster-plot-dbscan-py
import numpy as np
from sklearn.cluster import DBSCAN
from sklearn import metrics
from sklearn.datasets import make_blobs
from sklearn.preprocessing import StandardScaler{% endif %}

{% if model_func == "DBSCAN" %}
# #############################################################################
# USE EXAMPLE DATA
{% if data_format == "example" %}
df = pd.read_csv("datasets/iris2.csv")
{% endif %}
{% if data_format == "Spiral" %}
df = pd.read_csv("datasets/Spiral.csv")
{% endif %}
{% if data_format == "Aggregation" %}
df = pd.read_csv("datasets/Aggregation.csv")
{% endif %}
{% if data_format == "R15" %}
df = pd.read_csv("datasets/R15.csv")
{% endif %}
dfSize = df.size
dfSize /= 2
X, labels_true = make_blobs(n_samples=int(dfSize))
X = df

X = StandardScaler().fit_transform(X){% endif %}

{% if model_func == "DBSCAN" %}
# #############################################################################
# Compute DBSCAN
db = DBSCAN(eps=0.3, min_samples=10).fit(X)
core_samples_mask = np.zeros_like(db.labels_, dtype=bool)
core_samples_mask[db.core_sample_indices_] = True
labels = db.labels_

# Number of clusters in labels, ignoring noise if present.
n_clusters_ = len(set(labels)) - (1 if -1 in labels else 0)
n_noise_ = list(labels).count(-1)

print('Estimated number of clusters: %d' % n_clusters_)
print('Estimated number of noise points: %d' % n_noise_)
print("Homogeneity: %0.3f" % metrics.homogeneity_score(labels_true, labels))
print("Completeness: %0.3f" % metrics.completeness_score(labels_true, labels))
print("V-measure: %0.3f" % metrics.v_measure_score(labels_true, labels))
print("Adjusted Rand Index: %0.3f"
      % metrics.adjusted_rand_score(labels_true, labels))
print("Adjusted Mutual Information: %0.3f"
      % metrics.adjusted_mutual_info_score(labels_true, labels))
print("Silhouette Coefficient: %0.3f"
      % metrics.silhouette_score(X, labels)){% endif %}

{% if model_func == "DBSCAN" %}
# #############################################################################
# Plot result
import matplotlib.pyplot as plt

# Black removed and is used for noise instead.
unique_labels = set(labels)
colors = [plt.cm.Spectral(each)
          for each in np.linspace(0, 1, len(unique_labels))]
for k, col in zip(unique_labels, colors):
    if k == -1:
        # Black used for noise.
        col = [0, 0, 0, 1]

    class_member_mask = (labels == k)

    xy = X[class_member_mask & core_samples_mask]
    plt.plot(xy[:, 0], xy[:, 1], 'o', markerfacecolor=tuple(col),
             markeredgecolor='k', markersize=14)

    xy = X[class_member_mask & ~core_samples_mask]
    plt.plot(xy[:, 0], xy[:, 1], 'o', markerfacecolor=tuple(col),
             markeredgecolor='k', markersize=6)

plt.title('Estimated number of clusters: %d' % n_clusters_)
plt.show(){% endif %}


