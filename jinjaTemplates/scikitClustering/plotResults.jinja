{% if model_func == "K-means" and data_format == "example" %}
df1 = df[df.cluster==0]
df2 = df[df.cluster==1]
df3 = df[df.cluster==2]
plt.scatter(df1['petal length in cm'],df1['petal width in cm'],color='green')
plt.scatter(df2['petal length in cm'],df2['petal width in cm'],color='red')
plt.scatter(df3['petal length in cm'],df3['petal width in cm'],color='black')
plt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],color='purple',marker='*',label='centroid')
plt.legend(){% endif %}
{% if model_func == "Gauss" and data_format == "example" %}
df1 = df[df.cluster==0]
df2 = df[df.cluster==1]
df3 = df[df.cluster==2]
plt.scatter(df1[0],df1[1],color='green')
plt.scatter(df2[0],df2[1],color='red')
plt.scatter(df3[0],df3[1],color='black')
plt.legend(){% endif %}
{% if ((model_func == "K-means" and data_format == "Spiral") or (model_func == "Gauss" and data_format == "Spiral")) %}
df1 = df[df.cluster==0]
df2 = df[df.cluster==1]
df3 = df[df.cluster==2]
plt.scatter(df1[0],df1[1],color='green')
plt.scatter(df2[0],df2[1],color='red')
plt.scatter(df3[0],df3[1],color='black')
{% if model_func == "K-means" %}plt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],color='purple',marker='*',label='centroid')
plt.legend(){% endif %}{% endif %}
{% if ((model_func == "K-means" and data_format == "Aggregation") or (model_func == "Gauss" and data_format == "Aggregation")) %}
df1 = df[df.cluster==0]
df2 = df[df.cluster==1]
df3 = df[df.cluster==2]
df4 = df[df.cluster==3]
df5 = df[df.cluster==4]
df6 = df[df.cluster==5]
df7 = df[df.cluster==6]
df8 = df[df.cluster==7]
plt.scatter(df1[0],df1[1],color='green')
plt.scatter(df2[0],df2[1],color='red')
plt.scatter(df3[0],df3[1],color='black')
plt.scatter(df4[0],df4[1],color='yellow')
plt.scatter(df5[0],df5[1],color='orange')
plt.scatter(df6[0],df6[1],color='aqua')
plt.scatter(df7[0],df7[1],color='gray')
plt.scatter(df8[0],df8[1],color='olive')
{% if model_func == "K-means" %}plt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],color='purple',marker='*',label='centroid')
plt.legend(){% endif %}{% endif %}
{% if ((model_func == "K-means" and data_format == "R15") or (model_func == "Gauss" and data_format == "R15")) %}
df1 = df[df.cluster==0]
df2 = df[df.cluster==1]
df3 = df[df.cluster==2]
plt.scatter(df1[0],df1[1],color='green')
plt.scatter(df2[0],df2[1],color='red')
plt.scatter(df3[0],df3[1],color='black')
{% if model_func == "K-means" %}plt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],color='purple',marker='*',label='centroid')
plt.legend(){% endif %}{% endif %}
{% if model_func == "DBSCAN" %}
# #############################################################################
# Plot result
import matplotlib.pyplot as plt

# Black removed and is used for noise instead.
unique_labels = set(labels)
colors = [plt.cm.Spectral(each)
          for each in np.linspace(0, 1, len(unique_labels))]
for k, col in zip(unique_labels, colors):
    if k == -1:
        # Black used for noise.
        col = [0, 0, 0, 1]

    class_member_mask = (labels == k)

    xy = X[class_member_mask & core_samples_mask]
    plt.plot(xy[:, 0], xy[:, 1], 'o', markerfacecolor=tuple(col),
             markeredgecolor='k', markersize=14)

    xy = X[class_member_mask & ~core_samples_mask]
    plt.plot(xy[:, 0], xy[:, 1], 'o', markerfacecolor=tuple(col),
             markeredgecolor='k', markersize=6)

plt.title('Estimated number of clusters: %d' % n_clusters_)
plt.show(){% endif %}