#Model Training
starttime = datetime.datetime.now()

EPOCHS  = {{ epochs }}
X_train = Variable(torch.from_numpy(X_train)).float()
{% if dataset == "Iris" %}
y_train = Variable(torch.from_numpy(y_train)).long()
{% elif dataset == "Spiral" or dataset == "Aggregation" or dataset == "R15" %}
y_train = Variable(y_train).long()
{% endif %}
X_test  = Variable(torch.from_numpy(X_test)).float()
{% if dataset == "Iris" %}
y_test  = Variable(torch.from_numpy(y_test)).long()
{% elif dataset == "Spiral" or dataset == "Aggregation" or dataset == "R15" %}
y_test  = Variable(y_test).long()
{% endif %}

loss_list     = np.zeros((EPOCHS,))
accuracy_list = np.zeros((EPOCHS,))

for epoch in trange(EPOCHS):
    y_pred = model(X_train)
    loss = loss_fn(y_pred, y_train)
    loss_list[epoch] = loss.item()
    
    # Zero gradients
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()
    
    with torch.no_grad():
        y_pred = model(X_test)
        correct = (torch.argmax(y_pred, dim=1) == y_test).type(torch.FloatTensor)
        accuracy_list[epoch] = correct.mean()

endtime = datetime.datetime.now()
executionTime = endtime-starttime
#set_training

e_training = d1.entity('ex:Cell Training', (
    ('ex:type', 'notebook_cell'),
    ('ex:type', 'p-plan:step'),
))
a_settraining = d1.activity('ex:set_training()', startTime=starttime, endTime=endtime, other_attributes={'prov:executionTime': str(executionTime)})
d1.wasStartedBy(a_settraining, e_training)
d1.hadMember(e_notebook, e_training)
e_training_data = d1.entity(
    'ex:Training Data',(
        ('ex:epochs', EPOCHS),
        ('ex:numberOfParameters', hierarchical_summary(model, print_summary = False)[1]),  
))
d1.wasGeneratedBy(e_training_data, a_settraining)
d1.wasInfluencedBy(e_training, e_modelparameters_data)